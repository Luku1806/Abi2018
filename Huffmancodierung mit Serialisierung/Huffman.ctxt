#BlueJ class context
comment0.params=
comment0.target=Huffman()
comment0.text=\r\n\ Konstruktor\ f\u00FCr\ Objekte\ der\ Klasse\ Huffman\r\n
comment1.params=pText
comment1.target=List\ haeufigkeit(java.lang.String)
comment1.text=\r\n\ Ermittelt\ die\ H\u00E4ufigkeit\ der\ einzelnen\ Zeichen\ in\ einer\ String\ und\ schreibt\ diese\ als\ Zeichen-Objekt\ in\ einen\ leeren\ Bin\u00E4rbaum,\r\n\ und\ gibt\ diese\ als\ Huffmanliste\ zurueck.\r\n\ \r\n\ @param\ pText\ Der\ zu\ benutzende\ Text.\r\n\ @return\ Die\ Huffmanliste\ die\ jedes\ Zeichen\ zusammen\ mit\ seiner\ Haeufigkeit\ als\ einzelne\ Baueme\ gespeichert\ hat.\r\n
comment10.params=toCompress
comment10.target=Huffmancode\ compress(java.lang.String)
comment10.text=\r\n\ Komprimiert\ einen\ Text\ mithilfe\ der\ Huffmancodierung.\r\n\ \r\n\ @param\ pText\ Der\ zu\ komprimierende\ Text.\r\n\ @return\ Ein\ Huffmancode\ Objekt,\ dass\ Kodierung(Komprimierung)\ und\ den\ zum\ dekodieren\ benoetigten\ Huffmantree\ beinhaltet.\ \r\n
comment11.params=toDecompress
comment11.target=java.lang.String\ decompress(Huffmancode)
comment11.text=\r\n\ Dekomprimiert\ einen\ in\ Huffmancode\ kodierten\ Text.\r\n\ \r\n\ @param\ toDecompress\ Das\ Huffmancode-Objekt\ welches\ Code\ und\ Baum\ bereitstellt.\r\n\ @return\ Der\ dekomprimierte\ und\ ecodierte\ Text.\ \r\n
comment2.params=wahrscheinlichkeiten
comment2.target=List\ sortiereHuffmanliste(List)
comment2.text=\r\n\ Sortiert\ eine\ Huffmanliste\ nach\ Hauefigkeit.\r\n\ \r\n\ @param\ Die\ zu\ sortierende\ Huffmanliste.\r\n\ @return\ Die\ sortierte\ Huffmanliste.\r\n
comment3.params=wahrscheinlichkeiten
comment3.target=BinaryTree\ createTree(List)
comment3.text=\r\n\ Erstellt\ einen\ Huffmanbaum\ und\ gibt\ diesen\ zurueck.\r\n\ \r\n\ @param\ Die\ zu\ benutzende\ Huffmanliste.\r\n\ @return\ Der\ erstellte\ Huffmantree.\r\n
comment4.params=pZeichen\ pBaum\ pCode
comment4.target=java.lang.String\ charCodieren(char,\ BinaryTree,\ java.lang.String)
comment4.text=\r\n\ Codiert\ einen\ Character\ in\ den\ zugehoerigen\ Huffmancode.\r\n\ \r\n\ @param\ pZeichen\ Das\ zu\ codierende\ Zeichen.\r\n\ @param\ pBaum\ Der\ zu\ benutzende\ Huffmantree.\r\n\ @param\ pCode\ Hilfsparameter\!\ Leere\ String\ eingeben\!\r\n\ \r\n\ @return\ Der\ eingegebene\ Character\ als\ Huffmancode.\r\n
comment5.params=pBaum\ pText
comment5.target=java.util.Hashtable\ createTableFromTree(BinaryTree,\ java.lang.String)
comment5.text=\r\n\ Erstellt\ eine\ Codetabelle\ zu\ einem\ Text\ und\ dem\ dazugehoerigen\ Huffmantree.\r\n\ \r\n\ @param\ pBaum\ Der\ in\ die\ Tabelle\ zu\ uebertragende\ Huffmanbaum.\r\n\ @param\ pText\ Der\ zum\ Baum\ gehoerige\ Text.\r\n\ \r\n\ @return\ Die\ zum\ Baum\ und\ Text\ gehorige\ Codetabelle.\r\n
comment6.params=pText
comment6.target=java.lang.String\ textToHuffmanBinary(java.lang.String)
comment6.text=\r\n\ Codiert\ einen\ mindestens\ 2\ stelligen\ Text\ in\ binaeren\ Huffmancode\ und\ gibt\ diesen\ als\ String\ zurueck.\r\n\ \r\n\ @param\ pText\ Der\ zu\ codierende\ Text.\r\n\ @return\ Der\ codierte\ Text\ als\ String.\r\n
comment7.params=huffmantree\ binary
comment7.target=java.lang.String\ huffmanBinaryToText(BinaryTree,\ java.lang.String)
comment7.text=\r\n\ Dekodiert\ einen\ String\ aus\ Binaercode\ mit\ Hilfe\ der\ Huffman\ Codierung.\r\n\ \r\n\ @param\ huffmantree\ Der\ zum\ Binaercode\ gehoerige\ Huffmantree.\r\n\ @param\ Binaey\ Der\ Binaercode\ der\ in\ Klartext\ uebersetzt\ werden\ soll.\r\n
comment8.params=pBinaer
comment8.target=java.lang.String\ binaryToAscii(java.lang.String)
comment8.text=\r\n\ Codiert\ Binaercode\ zu\ Ascii-Code.\r\n\ \r\n\ @param\ code\ Der\ zu\ codierende\ Binaercode.\r\n\ @return\ Der\ in\ Ascii-Code\ uebersetzte\ Binaercode.\r\n
comment9.params=code
comment9.target=java.lang.String\ asciiToBinary(java.lang.String)
comment9.text=\r\n\ Codiert\ Ascii-Code\ zu\ Binaercode.\r\n\ \r\n\ @param\ code\ Der\ zu\ codierende\ Ascii-Code.\r\n\ @return\ Der\ in\ Binaercode\ uebersetzte\ Ascii-Code.\r\n
numComments=12
